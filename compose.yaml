services:
  ui:
    networks:
      - internal
    user: deployuser
    build:
      dockerfile: Dockerfile
      context: ./www.micahnorwoodjordan.com
    volumes:
      - ./www.micahnorwoodjordan.com:/srv/ui
    env_file:
      - ../.env
    command:
      - /bin/bash
      - -c
      - |
        npm install --save-dev @rollup/rollup-linux-x64-gnu
        npx ng serve --host 0.0.0.0 --port $UI_PORT
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "http://api:${SERVER_PORT}/ping"
      interval: 5s
      timeout: 30s
      retries: 5
    depends_on:
      - api

  api:
    networks:
      - internal
    user: deployuser
    build:
      dockerfile: Dockerfile
      context: ./api.micahnorwoodjordan.com
      args:
        DATABASE_CONNECTION_STRING: ${DATABASE_CONNECTION_STRING}
        DATABASE_USER: ${DATABASE_USER}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
        SERVER_PORT: ${SERVER_PORT}
        SMTP_USERNAME: ${SMTP_USERNAME}
        SMTP_PASSWORD: ${SMTP_PASSWORD}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        REDIS_HOST: ${REDIS_HOST}
        REDIS_PORT: ${REDIS_PORT}
    volumes:
      - ./api.micahnorwoodjordan.com:/srv/api
    env_file:
      - ../.env
    command: 
      - /bin/bash
      - -c
      - |
        if [ "$DOCKER_DEPLOYMENT_METHOD" = "build" ]; then
          echo "RUNNING APPLICATION AS JAR";
          java -jar /srv/api/target/api.micahnorwoodjordan.com-build.jar;
        else
          echo "RUNNING APPLICATION IN WATCH MODE";
          ./mvnw spring-boot:run;
        fi
    depends_on:
      - redis
  static:
      networks:
      - internal
      user: deployuser
      build:
        context: ./static.micahnorwoodjordan.com
        dockerfile: Dockerfile
        args:
          FLASK_ENV: ${FLASK_ENV}
          DEBUG: ${DEBUG}
          AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
          AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
          S3_BUCKET_URL: ${S3_BUCKET_URL}
          REGION: ${REGION}
          S3_BUCKET_NAME: ${S3_BUCKET_NAME}
          STATIC_DIRECTORY: ${STATIC_DIRECTORY}
          RUNNING_LOCALLY: ${RUNNING_LOCALLY}
      volumes:
        - ./static.micahnorwoodjordan.com:/srv/static
      env_file:
        - ../.env
      command: /bin/bash -c "gunicorn -b 0.0.0.0:80 run:app"
      depends_on:
        - web

  # web container:
  #   serves as a proxy between my home LAN network and the internal docker network, consisting of the api container and ui container
  #   listens on port 80 of host
  #   routes traffic to the UI container
  #   routes traffic to the API container
  #   is exposed to host's LAN network
  web:
    networks:
      lan:
        ipv4_address: ${WEB_CONTAINER_IP_ADDRESS}
      internal: {}
    build:
      context: .
      args:
        WEB_PORT: ${WEB_PORT}
        SERVER_PORT: ${SERVER_PORT}
    image: nginx:1.27.3
    volumes:
      - ./docker.conf/nginx.conf:/etc/nginx/nginx.conf
    env_file:
      - ../.env
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "http://api:${SERVER_PORT}/ping"
      interval: 5s
      timeout: 30s
      retries: 5
    depends_on:
      - api
  redis:
    networks:
      - internal
    image: redis
    command:
      - /bin/bash
      - -c
      - |
        redis-server --bind 0.0.0.0 --requirepass ${REDIS_PASSWORD}
    env_file:
      - ../.env

networks:
  internal:  # internal docker network
    driver: bridge

  lan:  # home LAN network
     driver: macvlan
     driver_opts:
       parent: eth0  # LAN interface
     ipam:
       config:
         - subnet: ${WEB_LAN_SUBNET}  # reserve only last octet for containers
           gateway: ${WEB_GATEWAY_IP_ADDRESS}  # router's IP address
