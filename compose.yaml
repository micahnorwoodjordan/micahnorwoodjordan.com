services:
  ui:
    networks:
      - internal
    user: deployuser
    ports:
      - ${UI_PORT}:${UI_PORT}  # take advantage of browser reloads thanks to Angular's communication over WebSockets
    build:
      dockerfile: Dockerfile
      context: ./www.micahnorwoodjordan.com
      args:
        UI_PORT: ${UI_PORT}
        SERVER_PORT: ${SERVER_PORT}
    volumes:
      - ./www.micahnorwoodjordan.com:/srv/ui
    env_file:
      - .env
    command:
      - /bin/bash
      - -c
      - |
        npm install --save-dev @rollup/rollup-linux-x64-gnu
        npx ng serve --host 0.0.0.0 --port $UI_PORT
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "http://api:${SERVER_PORT}/ping"
      interval: 5s
      timeout: 30s
      retries: 5

  api:
    networks:
      - internal
    user: deployuser
    ports:
      - ${SERVER_PORT}
    build:
      dockerfile: Dockerfile
      context: ./api.micahnorwoodjordan.com
      args:
        DATABASE_CONNECTION_STRING: ${DATABASE_CONNECTION_STRING}
        DATABASE_USER: ${DATABASE_USER}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
        SERVER_PORT: ${SERVER_PORT}
        SMTP_USERNAME: ${SMTP_USERNAME}
        SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - ./api.micahnorwoodjordan.com:/srv/api
    env_file:
      - .env
    command: 
      - /bin/bash
      - -c
      - |
        if [ "$DOCKER_DEPLOYMENT_METHOD" = "build" ]; then
        echo "RUNNING APPLICATION AS JAR";
        java -jar /srv/api/target/api.micahnorwoodjordan.com-build.jar;
        else
          echo "RUNNING APPLICATION IN WATCH MODE";
          ./mvnw spring-boot:run;
        fi

  # nginx container:
  #   serves as a reverse proxy on home LAN network and internal docker network
  #   listens on port 80
  #   routes traffic to the UI container's port 4200
  web:
    networks:
      lan:
        ipv4_address: 192.168.0.136
      internal: {}
    build:
      context: .
      args:
        SERVER_PORT: ${SERVER_PORT}
    image: nginx:latest
    volumes:
      - ./docker.conf/nginx.conf:/etc/nginx/nginx.conf
    env_file:
      - .env
    ports:
      - 80:80
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "http://api:${SERVER_PORT}/ping"
      interval: 5s
      timeout: 30s
      retries: 5

networks:
  internal:  # internal docker network
    driver: bridge

  lan:  # home LAN network
     driver: macvlan
     driver_opts:
       parent: eth0  # LAN interface
     ipam:
       config:
         - subnet: "192.168.0.0/24"  # reserve only last octet for containers
           gateway: "192.168.0.1"  # router's IP address
